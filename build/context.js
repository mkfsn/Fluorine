// Generated by CoffeeScript 1.3.3
(function() {

  self.fluorine = self.fluorine || {};

  fluorine.Environment = function(env_init) {
    return new fluorine.Environment.o(env_init);
  };

  fluorine.Environment.o = function(env_init) {
    this.__done = false;
    this.__env_current = env_init || {};
    this.__proc = fluorine.Process();
    this.__init_arguments = arguments;
    return this;
  };

  fluorine.Environment.o.prototype._ = function(fn) {
    this.__proc.next(_.bind(function() {
      this.__env_current = fn.call(this.__env_current);
      return this.__proc.run(this.__env_current);
    }, this));
    return this;
  };

  fluorine.Environment.o.prototype.bind = function(act) {
    this.__proc.next(_.bind(function() {
      var monad_inner, proc_inner;
      monad_inner = act.call(this.__env_current);
      monad_inner.unclose();
      proc_inner = monad_inner.__proc;
      proc_inner.next(_.bind(function(env) {
        this.__env_current = env;
        return this.__proc.run(env);
      }, this));
      this.__proc.preconcat(proc_inner);
      monad_inner.__proc = this.__proc;
      return this.__proc.run(this.__env_current);
    }, this));
    return this;
  };

  fluorine.Environment.o.prototype.done = function() {
    if (this.__done) {
      return;
    }
    this.__done = true;
    this.__proc.next(_.bind(function() {
      var proc_new;
      this.__proc.refresh();
      proc_new = this.__proc;
      this.constructor.apply(this, this.__init_arguments);
      this.__proc = proc_new;
      return this.__done = true;
    }, this));
    return this;
  };

  fluorine.Environment.o.prototype.unclose = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    this.__proc.__queue.pop();
    return this;
  };

  fluorine.Environment.o.prototype.run = function() {
    if (!this.__done) {
      throw new Error("ERROR: The action is not done.");
    }
    this.__proc.run(this.__env_current);
    return this.__proc;
  };

  fluorine.IO = function() {
    return new fluorine.IO.o();
  };

  fluorine.IO.o = function() {
    this.__done = false;
    this.__env = {};
    this.__proc = fluorine.Process();
    this.__init_arguments = arguments;
    return this;
  };

  fluorine.IO.o.prototype.as = function(name) {
    this.__proc.next(_.bind(function(prev) {
      this.__env[name] = prev;
      return this.__proc.run(prev);
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.get = function(url, name_res, query) {
    this.__proc.next(_.bind(function(data) {
      return jQuery.ajax({
        url: url,
        data: query,
        success: fluorine.IO.__genAjaxSuccess(this.__proc),
        error: fluorine.IO.__genAjaxError(name_res)
      });
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.getBinary = function(url, name_res, query) {
    this.__proc.next(_.bind(function(data) {
      var request;
      request = fluorine.IO.__binaryAjax(this.__proc, url, name_res, "arraybuffer");
      return request.send(query);
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.getBinaryBlob = function(url, name_res, query) {
    this.__proc.next(_.bind(function(data) {
      var request;
      request = fluorine.IO.__binaryAjax(this.__proc, url, name_res, "blob");
      return request.send(query);
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.update = function(url, name_res) {
    this.__proc.next(_.bind(function(data) {
      return jQuery.ajax({
        type: "PUT",
        url: url,
        data: data,
        success: fluorine.IO.__genAjaxSuccess(this.__proc),
        error: fluorine.IO.__genAjaxError(name_res)
      });
    }, this));
    return this;
  };

  fluorine.IO.o.prototype._ = function(fn) {
    this.__proc.next(_.bind(function(prev) {
      var result;
      result = fn.call(this.__env, prev);
      return this.__proc.run(result);
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.bind = function(act) {
    this.__proc.next(_.bind(function(prev) {
      var monad_inner, proc_inner;
      monad_inner = act.call(this.__env, prev);
      monad_inner.unclose();
      proc_inner = monad_inner.__proc;
      proc_inner.next(_.bind(function(prev) {
        return this.__proc.run(prev);
      }, this));
      this.__proc.preconcat(proc_inner);
      monad_inner.__proc = this.__proc;
      return this.__proc.run(prev);
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.toEnvironment = function(name) {
    this.__proc.next(_.bind(function(prev) {
      var env;
      env = {};
      env[name] = prev;
      return this.__proc.run(env);
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.toEvent = function() {
    this.__proc.next(_.bind(function() {
      return this.__proc.run.apply(this.__proc, arguments);
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.toUI = function(ui_dom) {
    this.__proc.next(_.bind(function(data) {
      ui_dom.appendChild(data);
      return this.__proc.run(ui_dom);
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.done = function() {
    if (this.__done) {
      return;
    }
    this.__done = true;
    this.__proc.next(_.bind(function(result) {
      var proc_new;
      this.__proc.refresh();
      proc_new = this.__proc;
      this.constructor.apply(this, this.__init_arguments);
      this.__proc = proc_new;
      return this.__done = true;
    }, this));
    return this;
  };

  fluorine.IO.o.prototype.unclose = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    this.__proc.__queue.pop();
    return this;
  };

  fluorine.IO.o.prototype.run = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    this.__proc.run();
    return this.__proc;
  };

  fluorine.IO.__binaryAjax = function(proc, url, name_res, type) {
    var request;
    request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = type;
    request.addEventListener("load", function() {
      return fluorine.IO.__genAjaxSuccess(proc)(request.response, request.statusText, request);
    });
    request.addEventListener("error", function(event) {
      return fluorine.IO.__genAjaxError(name_res)(request, request.statusText, event);
    });
    return request;
  };

  fluorine.IO.__genAjaxSuccess = function(__proc) {
    var success;
    success = function(data, textStatus, jqXHR) {
      return __proc.run(data);
    };
    return success;
  };

  fluorine.IO.__genAjaxError = function(name_res) {
    var error;
    error = function(jqXHR, textStatus, errorThrown) {
      var msg;
      msg = "ERROR: IO error in request: " + name_res;
      console.error(msg, errorThrown);
      throw new Error(msg);
    };
    return error;
  };

  fluorine.UI = function(selector) {
    return new fluorine.UI.o(selector);
  };

  fluorine.UI.o = function(slc) {
    this.__$ = null;
    this.__done = false;
    this.__proc = fluorine.Process();
    this.__slc = slc;
    this.__init_arguments = arguments;
    return this;
  };

  fluorine.UI.o.prototype.$ = function() {
    this.__$ = jQuery;
    fluorine.UI.o.__mapMonadic(this);
    this.__proc.next(_.bind(function(slc) {
      return this.__proc.run(this.__$(slc));
    }, this));
    return this;
  };

  fluorine.UI.o.prototype.bind = function(act) {
    this.__proc.next(_.bind(function(dom_prev) {
      var monad_inner, proc_inner;
      monad_inner = act(dom_prev);
      monad_inner.unclose();
      proc_inner = monad_inner.__proc;
      proc_inner.next(_.bind(function(prev) {
        return this.__proc.run(prev);
      }, this));
      this.__proc.preconcat(proc_inner);
      monad_inner.__proc = this.__proc;
      return this.__proc.run(dom_prev);
    }, this));
    return this;
  };

  fluorine.UI.o.prototype.forward = function(ename) {
    return _.bind((function(fname) {
      this.__proc.next(_.bind(function(dom) {
        jQuery(dom).bind(ename, function(event) {
          var n;
          n = event;
          n.name = fname;
          return fluorine.Notifier.trigger(n);
        });
        return this.__proc.run();
      }, this));
      return this;
    }), this);
  };

  fluorine.UI.o.__delegate = function(args) {
    return this.__proc.next(_.bind(function(dom_prev) {
      var dom_result, name;
      name = args.name;
      dom_result = jQuery(dom_prev)[name].apply(dom_prev, args);
      return this.__proc.run(dom_result);
    }, this));
  };

  fluorine.UI.o.__mapMonadic = function(uimonad) {
    var names;
    names = ["addClass", "after", "append", "appendTo", "attr", "before", "css", "clone", "detach", "empty", "height", "html", "innerHeight", "innerWidth", "insertAfter", "insertBefore", "offset", "outerHeight", "outerWidth", "prepend", "prependTo", "remove", "removeAfter", "removeClass", "removeProp", "replaceAll", "replaceWith", "scrollLeft", "scrollTop", "text", "toggleClass", "unwrap", "val", "wrap", "wrap", "wrapAll", "wrapInner", "filter", "not", "eq", "has"];
    return _.each(names, function(name) {
      return uimonad[name] = function() {
        var args;
        args = _.map(arguments, function(a) {
          return a;
        });
        args.name = name;
        fluorine.UI.o.__delegate.call(this, args);
        return this;
      };
    });
  };

  fluorine.UI.o.prototype.done = function() {
    if (this.__done) {
      return;
    }
    this.__done = true;
    this.__proc.next(_.bind(function() {
      var $old, proc_new;
      this.__proc.refresh();
      proc_new = this.__proc;
      $old = this.__$;
      this.constructor.apply(this, this.__init_arguments);
      this.__$ = $old;
      this.__proc = proc_new;
      return this.__done = true;
    }, this));
    return this;
  };

  fluorine.UI.o.prototype.unclose = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    this.__proc.__queue.pop();
    return this;
  };

  fluorine.UI.o.prototype.run = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    this.__proc.run(this.__slc);
    return this.__proc;
  };

  fluorine.Socket = function(addrORhandler) {
    return new fluorine.Socket.o(addrORhandler);
  };

  fluorine.Socket.o = function(addrORhandler) {
    this.__subject = addrORhandler;
    this.__done = false;
    this.__proc = fluorine.Process();
    return this;
  };

  fluorine.Socket.o.prototype.connect = function() {
    this.__proc.next(_.bind(function(address) {
      var socket;
      socket = new WebSocket(address);
      return this.__proc.run(socket);
    }, this));
    return this;
  };

  fluorine.Socket.o.prototype.disconnect = function() {
    this.__proc.next(_.bind(function(socket) {
      socket.close();
      return this.__proc.run();
    }));
    return this;
  };

  fluorine.Socket.o.prototype.forward = function(ename) {
    var md_name;
    md_name = "on" + ename;
    return _.bind((function(mname) {
      this.__proc.next(_.bind(function(socket) {
        var fnForward;
        fnForward = function(event) {
          var note;
          note = event || {};
          note.name = mname;
          note.handler = socket;
          return fluorine.Notifier.trigger(note);
        };
        socket[md_name] = fnForward;
        return this.__proc.run(socket);
      }, this));
      return this;
    }), this);
  };

  fluorine.Socket.o.prototype.send = function(rope) {
    this.__proc.next(_.bind(function(socket) {
      socket.send(rope);
      return this.__proc.run(socket);
    }, this));
    return this;
  };

  fluorine.Socket.o.prototype.done = function() {
    if (this.__done) {
      return;
    }
    this.__done = true;
    this.__proc.next(_.bind(function() {
      var $old, proc_new;
      this.__proc.refresh();
      proc_new = this.__proc;
      $old = this.__$;
      this.constructor.call(this, this.__subject);
      this.__proc = proc_new;
      return this.__done = true;
    }, this));
    return this;
  };

  fluorine.Socket.o.prototype.run = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    this.__proc.run(this.__subject);
    return this.__proc;
  };

  fluorine.Socket.o.prototype.unclose = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    this.__proc.__queue.pop();
    return this;
  };

  fluorine.Event = function(iname) {
    return new fluorine.Event.o(iname);
  };

  fluorine.Event.o = function(iname) {
    this.__done = false;
    this.__iname = iname;
    this.__proc = fluorine.Process();
    this.__init_arguments = arguments;
    this.__proc.next(_.bind(function(note) {
      return this.__proc.run.apply(this.__proc, _.values(note));
    }, this));
    return this;
  };

  fluorine.Event.o.prototype._ = function(fn) {
    this.__proc.next(_.bind(function() {
      var result;
      result = fn.apply({}, arguments);
      if (_.isObject(result)) {
        result = _.values(result);
      }
      if (!_.isArray(result)) {
        result = [result];
      }
      return this.__proc.run.apply(this.__proc, result);
    }, this));
    return this;
  };

  fluorine.Event.o.prototype.out = function(name) {
    return _.bind((function(convert) {
      this.__proc.next(_.bind(function() {
        var note_body;
        note_body = convert.apply({}, arguments);
        note_body.name = name;
        return this.__proc.run(note_body);
      }, this));
      return this;
    }), this);
  };

  fluorine.Event.o.prototype.bind = function(mact) {
    this.__proc.next(_.bind(function() {
      var monad_inner, proc_inner;
      monad_inner = mact.apply({}, arguments);
      monad_inner.unclose();
      proc_inner = monad_inner.__proc;
      proc_inner.next(_.bind(function() {
        return this.__proc.run.apply(this.__proc, arguments);
      }, this));
      this.__proc.preconcat(proc_inner);
      monad_inner.__proc = this.__proc;
      return this.__proc.run.apply(this.__proc, arguments);
    }, this));
    return this;
  };

  fluorine.Event.o.prototype.done = function() {
    if (this.__done) {
      return;
    }
    this.__done = true;
    this.__proc.next(_.bind(function(note) {
      var proc_new;
      if (note.name === this.__iname) {
        this.__proc.refresh();
        proc_new = this.__proc;
        this.constructor.apply(this, this.__init_arguments);
        this.__proc = proc_new;
        this.__done = true;
        this.__proc.next(function() {});
        this.__proc.run(note);
      }
      fluorine.Notifier.trigger(note);
      if (note.name !== this.__iname) {
        this.__proc.next(_.bind(function() {
          this.__proc.refresh();
          proc_new = this.__proc;
          this.constructor.apply(this, this.__init_arguments);
          this.__proc = proc_new;
          return this.__done = true;
        }, this));
        return this.__proc.run(note);
      }
    }, this));
    return this;
  };

  fluorine.Event.o.prototype.unclose = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    this.__proc.__queue.pop();
    return this;
  };

  fluorine.Event.o.prototype.run = function() {
    if (!this.__done) {
      throw new Error("ERROR: The monad is not done.");
    }
    fluorine.Notifier.on(this.__iname + "." + Date.now().toString(), _.bind(function(note) {
      console.log("handle note: ", this.__iname);
      return this.__proc.run(note);
    }, this));
    return this.__proc;
  };

}).call(this);
