// Generated by CoffeeScript 1.3.3
(function() {

  self.fluorine = self.fluorine || {};

  fluorine.Notifier = {};

  fluorine.Notifier.init = function() {
    fluorine.Notifier.trie = {};
    return fluorine.Notifier;
  };

  fluorine.Notifier.on = function(str_names, cb, context) {
    if ("" === str_names) {
      return;
    }
    fluorine.EventTrie.set(fluorine.Notifier.trie, str_names, function(note) {
      return cb.call(context, note);
    });
    return fluorine.Notifier;
  };

  fluorine.Notifier.trigger = function(note) {
    var cb, cbs, itr;
    if (!note.name) {
      note = {
        name: note
      };
    }
    cbs = fluorine.EventTrie.match(fluorine.Notifier.trie, note.name);
    itr = 0;
    while (itr !== cbs.length) {
      cb = cbs[itr];
      cb.call(null, note);
      itr++;
    }
    return fluorine.Notifier;
  };

  fluorine.Notifier.off = function(str_names) {
    return fluorine.EventTrie.remove(fluorine.Notifier.trie, str_names);
  };

  fluorine.EventTrie = {};

  fluorine.EventTrie.set = function(tree, str_names, cb) {
    return fluorine.EventTrie.doSet(tree, str_names.split("."), cb);
  };

  fluorine.EventTrie.doSet = function(tree, names, cb) {
    var entry;
    entry = tree[names[0]];
    if (1 === names.length) {
      if (undefined === entry) {
        tree[names[0]] = {
          __data__: cb
        };
      } else {
        tree[names[0]]["__data__"] = cb;
      }
      return;
    }
    if (undefined === entry) {
      tree[names[0]] = {
        __data__: null
      };
    }
    return fluorine.EventTrie.doSet(tree[names[0]], names.slice(1), cb);
  };

  fluorine.EventTrie.remove = function(tree, str_names) {
    return fluorine.EventTrie.doRemove(tree, str_names.split("."));
  };

  fluorine.EventTrie.doRemove = function(tree, names) {
    var entry;
    entry = tree[names[0]];
    if (1 === names.length) {
      delete tree[names[0]];
      return;
    }
    if (undefined !== entry) {
      return fluorine.EventTrie.doRemove(tree[names[0]], names.slice(1));
    }
  };

  fluorine.EventTrie.match = function(tree, name) {
    return fluorine.EventTrie.doMatch(tree, name.split("."));
  };

  fluorine.EventTrie.doMatch = function(tree, names) {
    var entry;
    if (0 === names.length) {
      return fluorine.EventTrie.getNodes(tree, []);
    }
    entry = tree[names[0]];
    if (undefined === entry) {
      return [];
    }
    return fluorine.EventTrie.doMatch(entry, names.slice(1));
  };

  fluorine.EventTrie.getNodes = function(tree, mem) {
    var idx;
    if (null !== tree.__data__) {
      mem.push(tree.__data__);
    }
    for (idx in tree) {
      if ("__data__" !== idx) {
        fluorine.EventTrie.getNodes(tree[idx], mem);
      }
    }
    return mem;
  };

}).call(this);
